name: Análise SonarQube

on:
  push:
    branches:
      - main # Dispara o workflow quando há um push na branch 'main'
  pull_request:
    types: [opened, synchronize, reopened] # Dispara para PRs abertos, sincronizados ou reabertos

jobs:
  build:
    name: Build e Análise
    runs-on: ubuntu-latest # O ambiente onde o job será executado

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3
        with:
          # Para a análise de Pull Request, é crucial obter o histórico completo do Git.
          # fetch-depth: 0 garante que todo o histórico seja buscado.
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Use a versão do Node.js que seu projeto requer

      - name: Instalar Dependências
        run: npm install # Instala as dependências do seu projeto (definidas em package.json)

      - name: Rodar Testes e Gerar Relatórios
        # Esta etapa executa seus testes e gera os arquivos de relatório (lcov.info e junit.xml)
        run: npm test

      - name: Analisando SonarQube
        uses: SonarSource/sonarqube-scan-action@v2.0.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}   # Add the URL of your instance to the variables of this repo with the name SONAR_HOST_URL (Settings > Secrets > Actions > add new repository secret)

      #- name: Executar Análise SonarQube
      #  uses: sonarsource/sonarqube-scan-action@master # Ação oficial do SonarSource para escanear
      #  env:
          # Variáveis de ambiente necessárias para o scanner do SonarQube.
          # Elas são puxadas das Secrets configuradas no GitHub.
       #   SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
       #   SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}
